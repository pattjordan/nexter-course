.story {
    // No story block used in html

    &__pictures {
        background-color: $color-primary;
        grid-column: full-start / col-end 4;
        background-image: linear-gradient(rgba($color-primary, .5), rgba($color-primary, .5)), url(../img/back.jpg);

        display: grid;
        grid-template-rows: repeat(6, 1fr);
        grid-template-columns: repeat(6, 1fr);
        align-items: center; // Images will be centered vertically in their grid area
    }

    &__img--1 {
        width: 100%; // Always define a width, for images in % so they stay flexible
        grid-row: 2 / 6;
        grid-column: 2 / 6; // Image does not fit grid item -> aspect ratio will not be changed

        box-shadow: 0 2rem 5rem rgba(#000, .1);
    }

    &__img--2 {
        width: 115%; // Create overlap by increasing picture
        z-index: 99;
        grid-row: 4 / 6;
        grid-column: 4 / 7;

        box-shadow: 0 2rem 5rem rgba(#000, .2); // .1 because it overlaps a darker area
    }

    &__content {
        background-color: $color-grey-light-1;
        grid-column: col-start 5 / full-end;

        // padding: 6rem 12rem;
        padding: 6rem 8vw; // More responsive padding than hardcoded solution

        /*
        // FLEXBOX for 1-dim layouts
        display: flex; // Parent container for story__text
        flex-direction: column; // Main axis now top-down
        justify-content: center; // vertically centered
        align-items: flex-start; // Content justified to left side
        */

        // Same solution with GRID
        display: grid;
        align-content: center;
        justify-items: flex-start; // same als align-items (flexbox)
    }

    &__text {
        font-size: 1.5rem;
        font-style: italic;
        margin-bottom: 4rem; // Not reusable -> not implemented via helper class
    }
    
}